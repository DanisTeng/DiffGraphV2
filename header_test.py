from header import *


def test_single_create_header_case(function_name: str,
                                   inputs: str,
                                   outputs: str,
                                   derivatives: str,
                                   supported_options: List[str],
                                   enable_debug=False):
    # Make a header
    header = Header.create_header(function_name,
                                  inputs,
                                  outputs,
                                  derivatives,
                                  supported_options)

    # Get python code to create the header
    python_code_lines = header.print_python_code_to_create_header("recreated_header")
    python_code_lines = "\n".join(python_code_lines)

    # Execute the code generated by header to get recreated_header
    local_result = {}
    exec(python_code_lines, globals(), local_result)
    recreated_header = local_result["recreated_header"]

    # Get python code to create the recreated_header
    recreated_header_python_code_lines = recreated_header.print_python_code_to_create_header("recreated_header")
    recreated_header_python_code_lines = "\n".join(recreated_header_python_code_lines)

    if enable_debug:
        print(python_code_lines)
        print(recreated_header_python_code_lines)

    # Check header and recreated_header being the same, by evaluating their python creation code.
    assert python_code_lines == recreated_header_python_code_lines


def test_create_header():
    test_single_create_header_case(function_name="Add",
                                   inputs="double x,double y,UserType c",
                                   outputs="double z",
                                   derivatives="D_z_D_x=1, D_z_D_y",
                                   supported_options=["d0", "d1", "d2"])

    test_single_create_header_case(function_name="NoInputFunc",
                                   inputs="",
                                   outputs="double z, Usertype c",
                                   derivatives="",
                                   supported_options=["d0", "d1", "d2"])

    test_single_create_header_case(function_name="ComplexName",
                                   inputs="double x_0_3,double y24,UserType c9_9",
                                   outputs="double z51",
                                   derivatives="D_z51_D_x_0_3, D_z51_D_y24, D2_z51_D_x_0_3_D_x_0_3=1",
                                   supported_options=["d0", "d1", "d2"])


if __name__ == "__main__":
    test_create_header()
